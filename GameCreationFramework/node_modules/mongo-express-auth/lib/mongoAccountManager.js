/*=============================================
     MongoDB Account Manager

=============================================*/

var passwordTools = require('./passwordTools.js');

var g = {
    mongoClient: null,
    mongoCollection: null
}

//===========================
//  API
//===========================

exports.init = function(config, done){
    initMongo(config.mongo, onMongoReady);

    function onMongoReady(err){
        if (err)
            throw err;
        done();
    }
}

exports.getAccount = function(username, password, done){
    g.mongoCollection.findOne(
        { 
            username: username
        }, 
        function(err, result){
            if (err)
                done(err, null)
            else if (result == null){
                done('user doesn\'t exist', null);
            }
            else if (!passwordTools.validatePassword(password, result.hashedPassword))
                done('bad password', null);
            else
                done(err, result);
        }
    );
}

exports.createAccount = function(username, password, done){
    g.mongoCollection.insert(
        { 
            username: username, 
            hashedPassword: passwordTools.saltAndHash(password)
        }, 
        // BUG FIX: didn't warn about duplicate user names
        {safe: true},
        function(err, result){
            if (err && err.err.indexOf('duplicate key error') !== -1)
                done('username already exists', null);
            else if (err)
                done(err, null);
            else
                done(err, result);
        }
    );
}

//===========================
//  MONGO INIT
//===========================

var mongo = require('mongodb');

var defaultMongoConfig = {
    host: 'localhost',
    port: mongo.Connection.DEFAULT_PORT
};

function initMongo(mongoConfig, done){

    var host = mongoConfig.host || defaultMongoConfig.host;
    var port = mongoConfig.port || defaultMongoConfig.port;

    var optionsWithEnableWriteAccess = { w: 1 };

    g.mongoClient = new mongo.Db(
        mongoConfig.dbName,
        new mongo.Server(host, port),
        optionsWithEnableWriteAccess
    );

    openCollection(mongoConfig, done);
}

function openCollection(mongoConfig, done){
    collectionName = mongoConfig.collectionName;
    g.mongoClient.open(_databaseAuth);

    /*
        ADDED AUTHENTICATION FOR DB HERE
    */
    function _databaseAuth(err, db) {
        if (err) done(err);
        db.authenticate(
            mongoConfig.dbusername, 
            mongoConfig.dbpassword, 
            function(error, result) {
                if (error) done(error);
                // result being false means authentication didn't work
                if (!result) {
                    console.log("database authentication not successful.");
                }
                else {
                    onDbReady(db);
                }
            });
    }

    function onDbReady(db){
        g.mongoClient.collection(collectionName, onCollectionReady);
    }

    function onCollectionReady(error, collection){
        if (error)
            done(error)

        g.mongoCollection = collection;

        g.mongoCollection.ensureIndex(
            'username', 
            { 'unique': true }, 
            onUniquenessEnsured
        );

    }

    function onUniquenessEnsured(err){
        done(err);

    }
}
